// Code generated by MockGen. DO NOT EDIT.
// Source: internal/goroutine/periodic.go

// Package mock_goroutine is a generated GoMock package.
package mock_goroutine

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockfullErrorHandler is a mock of fullErrorHandler interface.
type MockfullErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockfullErrorHandlerMockRecorder
}

// MockfullErrorHandlerMockRecorder is the mock recorder for MockfullErrorHandler.
type MockfullErrorHandlerMockRecorder struct {
	mock *MockfullErrorHandler
}

// NewMockfullErrorHandler creates a new mock instance.
func NewMockfullErrorHandler(ctrl *gomock.Controller) *MockfullErrorHandler {
	mock := &MockfullErrorHandler{ctrl: ctrl}
	mock.recorder = &MockfullErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockfullErrorHandler) EXPECT() *MockfullErrorHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockfullErrorHandler) Handle(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockfullErrorHandlerMockRecorder) Handle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockfullErrorHandler)(nil).Handle), ctx)
}

// HandleError mocks base method.
func (m *MockfullErrorHandler) HandleError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleError", err)
}

// HandleError indicates an expected call of HandleError.
func (mr *MockfullErrorHandlerMockRecorder) HandleError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockfullErrorHandler)(nil).HandleError), err)
}

// MockHandler is a mock of Handler interface.
type MockHandler struct {
	ctrl     *gomock.Controller
	recorder *MockHandlerMockRecorder
}

// MockHandlerMockRecorder is the mock recorder for MockHandler.
type MockHandlerMockRecorder struct {
	mock *MockHandler
}

// NewMockHandler creates a new mock instance.
func NewMockHandler(ctrl *gomock.Controller) *MockHandler {
	mock := &MockHandler{ctrl: ctrl}
	mock.recorder = &MockHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHandler) EXPECT() *MockHandlerMockRecorder {
	return m.recorder
}

// Handle mocks base method.
func (m *MockHandler) Handle(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Handle", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Handle indicates an expected call of Handle.
func (mr *MockHandlerMockRecorder) Handle(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Handle", reflect.TypeOf((*MockHandler)(nil).Handle), ctx)
}

// MockErrorHandler is a mock of ErrorHandler interface.
type MockErrorHandler struct {
	ctrl     *gomock.Controller
	recorder *MockErrorHandlerMockRecorder
}

// MockErrorHandlerMockRecorder is the mock recorder for MockErrorHandler.
type MockErrorHandlerMockRecorder struct {
	mock *MockErrorHandler
}

// NewMockErrorHandler creates a new mock instance.
func NewMockErrorHandler(ctrl *gomock.Controller) *MockErrorHandler {
	mock := &MockErrorHandler{ctrl: ctrl}
	mock.recorder = &MockErrorHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockErrorHandler) EXPECT() *MockErrorHandlerMockRecorder {
	return m.recorder
}

// HandleError mocks base method.
func (m *MockErrorHandler) HandleError(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleError", err)
}

// HandleError indicates an expected call of HandleError.
func (mr *MockErrorHandlerMockRecorder) HandleError(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleError", reflect.TypeOf((*MockErrorHandler)(nil).HandleError), err)
}

// MockFinalizer is a mock of Finalizer interface.
type MockFinalizer struct {
	ctrl     *gomock.Controller
	recorder *MockFinalizerMockRecorder
}

// MockFinalizerMockRecorder is the mock recorder for MockFinalizer.
type MockFinalizerMockRecorder struct {
	mock *MockFinalizer
}

// NewMockFinalizer creates a new mock instance.
func NewMockFinalizer(ctrl *gomock.Controller) *MockFinalizer {
	mock := &MockFinalizer{ctrl: ctrl}
	mock.recorder = &MockFinalizerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFinalizer) EXPECT() *MockFinalizerMockRecorder {
	return m.recorder
}

// OnShutdown mocks base method.
func (m *MockFinalizer) OnShutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnShutdown")
}

// OnShutdown indicates an expected call of OnShutdown.
func (mr *MockFinalizerMockRecorder) OnShutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnShutdown", reflect.TypeOf((*MockFinalizer)(nil).OnShutdown))
}
